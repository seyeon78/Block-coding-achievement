# -*- coding: utf-8 -*-
"""creativity_user.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1czk2AZx3LuB3Jm2DkPN-z8X1H-DClji4
"""

import pandas as pd
import ast

def calculate_project_score(blocks_dic):
    # 카테고리별 블록 리스트
    func_blocks = ['functionAddButton', 'function_name', 'showFunctionPropsButton', 'set_func_variable', 'get_func_variable']
    l2 = ['show', 'hide', 'remove_dialog', 'flip_x', 'flip_y']
    l3 = ['add_effect_amount', 'change_effect_amount', 'change_scale_size', 'set_scale_size']
    l4 = ['dialog_time', 'dialog', 'change_object_index']
    s2 = ['get_sound_volume', 'get_sound_speed', 'stop_bgm']
    s3 = ['sound_volume_change', 'sound_volume_set', 'sound_speed_change', 'sound_speed_set']
    s4 = ['sound_something_with_block', 'sound_something_second_with_block', 'sound_from_to', 'sound_something_wait_with_block', 'sound_from_to_and_wait', 'get_sound_duration', 'sound_silent_all', 'play_bgm']
    m2 = ['bounce_wall']
    m3 =['move_direction', 'move_x', 'move_y', 'move_xy_time', 'locate_x', 'locate_y', 'locate_xy', 'locate_xy_time', 'locate', 'rotate_relative', 'direction_relative', 'direction_relative_duration', 'rotate_absolute', 'direction_absolute', 'move_to_angle']
    m4 = ['locate_object_time', 'rotate_by_time', 'see_angle_object']
    st3 = ['when_run_button_click', 'mouse_clicked', 'mouse_click_canceled', 'when_object_click', 'when_object_click_canceled', 'when_scene_start']
    st4 = ['when_some_key_pressed', 'when_message_cast', 'message_cast', 'message_cast_wait', 'start_scene', 'start_neighbor_scene']

    # 전체 블록 수
    total_blocks_count = sum(value for value in blocks_dic.values() if isinstance(value, int))

    # 기본 블록 수
    basic_blocks = total_blocks_count - sum(value for key, value in blocks_dic.items() if key in func_blocks + l2 + l3 + l4 + s2 + s3 + s4 + m2 + m3 + m4 + st3 + st4)

    # 카테고리별 블록 카운트
    func2 = sum(count for block, count in blocks_dic.items() if block in func_blocks)
    func3 = sum(count for block, count in blocks_dic.items() if block.startswith('func_'))
    looks2 = sum(count for block, count in blocks_dic.items() if block in l2)
    looks3 = sum(count for block, count in blocks_dic.items() if block in l3)
    looks4 = sum(count for block, count in blocks_dic.items() if block in l4)
    sound2 = sum(count for block, count in blocks_dic.items() if block in s2)
    sound3 = sum(count for block, count in blocks_dic.items() if block in s3)
    sound4 = sum(count for block, count in blocks_dic.items() if block in s4)
    move2 = sum(count for block, count in blocks_dic.items() if block in m2)
    move3 = sum(count for block, count in blocks_dic.items() if block in m3)
    move4 = sum(count for block, count in blocks_dic.items() if block in m4)
    start3 = sum(count for block, count in blocks_dic.items() if block in st3)
    start4 = sum(count for block, count in blocks_dic.items() if block in st4)

    # 카테고리별 블록 점수
    func_sum = func2 + func3
    looks_sum = looks2 + looks3 + looks4
    sound_sum = sound2 + sound3 + sound4
    move_sum = move2 + move3 + move4
    design_sum = looks_sum + sound_sum + move_sum
    start_sum = start3 + start4

    func_score = func_sum * 4
    looks_score = looks2 * 2 + looks3 * 3 + looks4 * 4
    sound_score = sound2 * 2 + sound3 * 3 + sound4 * 4
    move_score = move2 * 2 + move3 * 3 + move4 * 4
    design_score = looks_score + sound_score + move_score
    start_score = start3 * 3 + start4 * 4

    # 점수 계산
    if total_blocks_count == 0:
        creativityScore = 0.00
    else:
        creativityScore = round(((basic_blocks + func_score + design_score + start_score) / (total_blocks_count * 4)) * 100, 2)

    return creativityScore


def calculate_user_score_creativity(scores):
    if len(scores) <= 2:
        return sum(scores) / len(scores)
    else:
        scores_sorted = sorted(scores)
        scores_to_use = scores_sorted[1:-1]
        return sum(scores_to_use) / len(scores_to_use)


def main_creativity():
    df = pd.read_csv('filtered_log.csv')
    new = pd.DataFrame(columns=['userid', 'projectid', 'date', 'creativityScore'])

    # df파일 읽으며 프로젝트별 창의성 점수 계산, 파일 새로 생성
    for index, row in df.iterrows():
        blocks_dic = ast.literal_eval(row['blocks'])
        creativity_score = calculate_project_score(blocks_dic)
        new = pd.concat([new, pd.DataFrame(
            {'userid': [row['userid']], 'projectid': [row['projectid']], 'date': [row['date']],
             'creativityScore': [creativity_score]})], ignore_index=True)

    new.to_csv('creativity_project.csv', index=False)

    # 프로젝트별 논리성 점수 파일 읽은후 유저별 점수 계산
    df2 = pd.read_csv('creativity_project.csv')

    output = pd.DataFrame()
    output['userid'] = df2['userid'].unique()  # df2에 존재하는 userid 저장

    # 유저 id별로 creativityScore 평균값 계산
    C = df2.groupby('userid')['creativityScore'].apply(lambda x: calculate_user_score_creativity(x.tolist())).reset_index()

    output = pd.merge(output, C, on='userid', how='left')

    min_val = C['creativityScore'].min()
    max_val = C['creativityScore'].max()

    # 정규화(Score)
    output['creativityScore'] = C['creativityScore'].apply(
        lambda x: 0 if x == 0 else round(((x - min_val) / (max_val - min_val)) * 100, 2))
    # (Rate)
    output['creativityRate'] = output['creativityScore'].apply(lambda x: round(x * (30 / 100), 2))

    output.to_csv('creativity_user.csv', index=False)

if __name__ == "__main__":
    main_creativity()